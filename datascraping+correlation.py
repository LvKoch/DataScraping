# -*- coding: utf-8 -*-
"""DataScraping+Correlation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrNpkRBJTkupZXOqqeoKucyHNhxosGcM
"""

import numpy as np                    #Numpy 
import pandas as pd                   #Pandas for data structures
import seaborn as sb
import matplotlib.pyplot as plt       #Matplot for cool graphs 
import scipy as sp

"""### In this document you will find:
**Part 1: Data Scraping** (GET THE DATA) = Fetching the data from a HTML web page using pandas

**Part 2: Data Cleaning & Slicing** (CLEAN THE DATA) = For the first data scraping I manually checked (5 lines of code) the data we collected and choose the tables and columns that fit our interest, once identified, I simply repeated and runned the code. 

**Part 3: Data Visualization** (VISUAL DATA) = Ploting some graphs for visual understanding.

**Part 4: Data Correlation** (CORRELATION) = Final findings and correlation

#PART 1
# Data Scraping (pd.read_html)
Data Scraping for dataset generation and data insights

ps: o PANDAS aceita CSV, XLSX, TXT e HTML como fontes de dados, nesse caso usaremos mineração direto do HTML
"""

# read the data = Data Scraping, on the URL the "Start=20200101"/ "End=20201026" represents JAN-01-2020 and OCT-26-2020

link_dataset = pd.read_html('https://coinmarketcap.com/currencies/chainlink/historical-data/?start=20200101&end=20201026')

link_dataset    #1ª visualização dos dados, apenas para garantir que capturamos algo.

"""## PART 2 
## Cleaning and Filtering

In this part I'll select only the data that contains the table with DAYS, OPENING, HIGH, LOW and CLOSING price. I will ignore the rest.
"""

len(link_dataset)    #"len" para sabermos quantos DATAFRAMES compõe os dados minerados, no momento deste comentário existem 4 DATAFRAMES na página HTML.

#DATAFRAMES DESCARTADOS
#link_dataset[1]
#link_dataset[3]

link_dataset[2]               #dos 4 DATAFRAMES minerados, o da posição [2], é o que contém a tabela que buscamos

link_data = link_dataset[2]  #Salvamos essa tabela em uma nova variável para facilitar a manipulação.

"""Using "ILOC" for slicing Python array.  

https://github.com/marcotcr/lime/issues/293
"""

link_high = link_data.iloc[:,3]   #Seleciona coluna HIGH price
link_low = link_data.iloc[:,4]    #Seleciona coluna LOW price
date = link_data.iloc[:,0]   #Seleciona coluna DATE (será usada para todas cryptos)

"""### Chainlink (graph)

Generates a "Scatter plot" type of graph for data visualization
"""

fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.scatter(date, link_high, color='r')
ax.scatter(date, link_low, color='b')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.set_title('scatter plot')
plt.gca().invert_xaxis()                #inverte o eixo X, pois o dataset estava decrescente a coluna 1
plt.show()

"""# PART 1 & 2 - Data Scraping and Filtering with other 3 cryptos + Gold

Repeat the 1º process 3x times

##Bitcoin, Ethereum, Cardano, and Gold
"""

#"Start=20200101"/ "End=20201026" represents JAN-01-2020 and OCT-26-2020
#Scraping for BITCOIN 
btc_dataset = pd.read_html('https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=20200101&end=20201026')
#Scraping for ETHEREUM 
eth_dataset = pd.read_html('https://coinmarketcap.com/currencies/ethereum/historical-data/?start=20200101&end=20201026')
#Scraping for CARDANO 
ada_dataset = pd.read_html('https://coinmarketcap.com/currencies/cardano/historical-data/?start=20200101&end=20201026')
#Scraping for GOLD
#gold_dataset = pd.read_html()

len(btc_dataset) #Check the data crypto 2

len(eth_dataset) #Check the data crypto 3

len(ada_dataset) #Check the data crypto 4

btc_dataset[2]  #Check the table crypto 2

eth_dataset[2]  #Check the table crypto 3

ada_dataset[2]  #Check the table crypto 4

"""## PART 2 
## Cleaning and Filtering - Bitcoin (BTC), Ethereum (ETH), Cardano (ADA)
"""

#Defining new variables to store the selected tables[2]
btc_data = btc_dataset[2]
eth_data = eth_dataset[2]
ada_data = ada_dataset[2]

#Slicing Daily HIGH, LOW prices.
#BTC
btc_high = btc_data.iloc[:,3]
btc_low = btc_data.iloc[:,4]
#ETH
eth_high = eth_data.iloc[:,3]
eth_low = eth_data.iloc[:,4]
#ADA
ada_high = ada_data.iloc[:,3]
ada_low = ada_data.iloc[:,4]

"""### Bitcoin (graph)"""

fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.scatter(date, btc_high, color='r')
ax.scatter(date, btc_low, color='b')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.set_title('scatter plot')
plt.gca().invert_xaxis()                #inverte o eixo X, pois o dataset estava decrescente na coluna 1
plt.show()

"""### Ethereum (graph)"""

fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.scatter(date, eth_high, color='r')
ax.scatter(date, eth_low, color='b')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.set_title('scatter plot')
plt.gca().invert_xaxis()                #inverte o eixo X, pois o dataset estava decrescente na coluna 1
plt.show()

"""### Cardano (graph)"""

fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.scatter(date, ada_high, color='r')
ax.scatter(date, ada_low, color='b')
ax.set_xlabel('Date')
ax.set_ylabel('Price')
ax.set_title('scatter plot')
plt.gca().invert_xaxis()                #inverte o eixo X, pois o dataset estava decrescente na coluna 1
plt.show()

"""## PART 3 Correlation (LINK X BTC)
For each correlation will have to create a unique dataset (table)

### 1# Correlation: HIGH Price

For this case we're going to analize the correlation between the Daily HIGH price of each of the 4 coins with each other, for the entire period JAN-OCT 2020.

**Gráfico considerando a MAGNITUDE dos dados**
"""

# create figure and axis objects with subplots()
fig,ax = plt.subplots()
# make a plot
ax.plot(date, btc_high, color="red", marker="o")
# set x-axis label
ax.set_xlabel("Date",fontsize=14)
# set y-axis label
ax.set_ylabel("Btc Price",color="red",fontsize=14)

# twin object for two different y-axis on the sample plot
ax2=ax.twinx()
# make a plot with different y-axis using second axis object
ax2.plot(date, link_high,color="blue",marker="o")
ax2.set_ylabel("Link Price",color="blue",fontsize=14)
plt.show()

"""### Calculando a correlação

https://realpython.com/numpy-scipy-pandas-correlation-python/#example-pandas-correlation-calculation

###Bitcoin
"""

#BTC X ETH
btc_high.corr(eth_high)

#BTC X ADA
btc_high.corr(ada_high)

#BTC X LINK
btc_high.corr(link_high)

"""### Ethereum"""

#ETH X BTC
eth_high.corr(btc_high)

#ETH X ADA
eth_high.corr(ada_high)

#ETH X LINK
eth_high.corr(link_high)

"""### Cardano"""

#ADA X BTC
ada_high.corr(btc_high)

#ADA X ETH
ada_high.corr(eth_high)

#ADA X LINK
ada_high.corr(link_high)

"""### Chainlink"""

#LINK X BTC
link_high.corr(btc_high)

#LINK X ETH
link_high.corr(eth_high)

#LINK X ADA
link_high.corr(ada_high)